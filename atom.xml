<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhanglin&#39;s blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://github.zhangl.in/blog/"/>
  <updated>2017-05-26T05:54:04.000Z</updated>
  <id>http://github.zhangl.in/blog/</id>
  
  <author>
    <name>zhanglin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react native 学习笔记</title>
    <link href="http://github.zhangl.in/blog/2017/05/26/react-native-note-1/"/>
    <id>http://github.zhangl.in/blog/2017/05/26/react-native-note-1/</id>
    <published>2017-05-26T05:54:04.000Z</published>
    <updated>2017-05-26T05:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h2><ul>
<li>首先看完 The Basics 所有章节</li>
<li>记录下重点内容，以及可能是坑的东东。所谓的坑，大多数是没搞清楚罢了。<ul>
<li>重点记录章节中标红的部分，注意事项、与 web 差异等</li>
</ul>
</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>flex 布局<ul>
<li>flex 参数值接受一个值，数字类型；与 web 不同。</li>
<li>flex 元素的父元素必须指定了 flex 属性 或者 同时制定 width &amp; height 属性。</li>
<li>flex 在 rn 中默认的 flexDirection 是 column；web 中是 row。</li>
<li>alignItems: stretch 时 cross axis 不能制定固定大小（fiexed demension）</li>
</ul>
</li>
<li>network<ul>
<li>支持 fetch api</li>
<li>支持 await/async 语法</li>
<li>ios 默认开启 ATS(App Transport Security)，即默认屏蔽非 https 的请求。</li>
<li>支持 xhr，native 侧的 xhr 没有 cors 的限制</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Plan&quot;&gt;&lt;a href=&quot;#Plan&quot; class=&quot;headerlink&quot; title=&quot;Plan&quot;&gt;&lt;/a&gt;Plan&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先看完 The Basics 所有章节&lt;/li&gt;
&lt;li&gt;记录下重点内容，以及可能是坑的东东。所谓的坑，大多数
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React 源码学习笔记</title>
    <link href="http://github.zhangl.in/blog/2016/08/16/learn-react/"/>
    <id>http://github.zhangl.in/blog/2016/08/16/learn-react/</id>
    <published>2016-08-16T01:27:55.000Z</published>
    <updated>2016-08-16T01:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>ReactDOM.render<ul>
<li>ReactMount.render<ul>
<li>ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback)<ul>
<li>ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ReactDOM.render&lt;ul&gt;
&lt;li&gt;ReactMount.render&lt;ul&gt;
&lt;li&gt;ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback)&lt;ul
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swift 学习笔记二</title>
    <link href="http://github.zhangl.in/blog/2016/08/11/learn-swift-2/"/>
    <id>http://github.zhangl.in/blog/2016/08/11/learn-swift-2/</id>
    <published>2016-08-11T15:55:17.000Z</published>
    <updated>2016-08-11T15:55:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>普通枚举类型</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> north</span><br><span class="line">  <span class="keyword">case</span> east</span><br><span class="line">  <span class="keyword">case</span> south</span><br><span class="line">  <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="associated-values"><a href="#associated-values" class="headerlink" title="associated values"></a>associated values</h3><blockquote>
<p>有点像 c 中的 union，每个 case 可以存储数据</p>
</blockquote>
<h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Operand</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Unary</span>(<span class="type">String</span>, <span class="type">Double</span> -&gt; <span class="type">Double</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Binary</span>(<span class="type">String</span>, (<span class="type">Double</span>, <span class="type">Double</span>) -&gt; <span class="type">Double</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> plus = <span class="type">Operand</span>.<span class="type">Binary</span>(<span class="string">"+"</span>) &#123;</span><br><span class="line">  a, b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取-associated-value"><a href="#获取-associated-value" class="headerlink" title="获取 associated value"></a>获取 associated value</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Operand</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Unary</span>(<span class="type">String</span>, <span class="type">Double</span> -&gt; <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Binary</span>(<span class="type">String</span>, (<span class="type">Double</span>, <span class="type">Double</span>) -&gt; <span class="type">Double</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> plus = <span class="type">Operand</span>.<span class="type">Binary</span>(<span class="string">"+"</span>) &#123;</span><br><span class="line">    a, b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> plus &#123;</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Unary</span>(<span class="keyword">let</span> operand, <span class="keyword">let</span> fn):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(operand)</span>: <span class="subst">\(fn)</span>"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Binary</span>(operand, fn):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(operand)</span>: <span class="subst">\(fn)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="raw-values"><a href="#raw-values" class="headerlink" title="raw values"></a>raw values</h4><ul>
<li>is<ul>
<li>set to prepopulated values when first define the enumeration</li>
<li>all of the same type</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ASCIIControlCharactor</span>: <span class="title">Charactor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> tab = <span class="string">"\t"</span></span><br><span class="line">  <span class="keyword">case</span> lineFeed = <span class="string">"\n"</span></span><br><span class="line">  <span class="keyword">case</span> carriageReturn = <span class="string">"\r"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>implicity assigned raw values</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Week</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Monday</span> = <span class="number">1</span>, <span class="type">Thuesday</span>, <span class="type">Wednesday</span>, <span class="type">Thursday</span>, <span class="type">Friday</span>, <span class="type">Saturday</span>, <span class="type">Sunday</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// case 递增 +1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> north, east, south, west</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value 为 case name</span></span><br></pre></td></tr></table></figure>
<ul>
<li>access raw value</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="type">CompassPoint</span>.north.rawValue)</span><br></pre></td></tr></table></figure>
<ul>
<li>initializing from a raw value</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> day: <span class="type">Week</span>? = <span class="type">Week</span>(rawValue: <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<h3 id="recursive-enumerations"><a href="#recursive-enumerations" class="headerlink" title="recursive enumerations"></a>recursive enumerations</h3><ul>
<li>indicate enumeration case by prefixing <code>indirect</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">  <span class="keyword">indirect</span> <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">  <span class="keyword">indirect</span> <span class="keyword">case</span> mulitiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">  <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">  <span class="keyword">case</span> mulitiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> mulitiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (5 + 4) * 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = <span class="type">ArithmeticExpression</span>.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four = <span class="type">ArithmeticExpression</span>.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> add = <span class="type">ArithmeticExpression</span>.addition(five, four)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> two = <span class="type">ArithmeticExpression</span>.number(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> multi = <span class="type">ArithmeticExpression</span>.mulitiplication(add, two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> expression: ArithmeticExpression)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> expression &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .number(num):</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .addition(a, b):</span><br><span class="line">        <span class="keyword">return</span> calculate(a) + calculate(b)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .mulitiplication(a, b):</span><br><span class="line">        <span class="keyword">return</span> calculate(a) * calculate(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calculate(multi))</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;enum&quot;&gt;&lt;a href=&quot;#enum&quot; class=&quot;headerlink&quot; title=&quot;enum&quot;&gt;&lt;/a&gt;enum&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swift 学习笔记一</title>
    <link href="http://github.zhangl.in/blog/2016/08/08/learn-swift-1/"/>
    <id>http://github.zhangl.in/blog/2016/08/08/learn-swift-1/</id>
    <published>2016-08-08T15:18:24.000Z</published>
    <updated>2016-08-08T15:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul>
<li>Int</li>
<li>Float</li>
<li>Double</li>
<li>String</li>
<li>Boolean</li>
<li>Tuple<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status = (<span class="number">404</span>, <span class="string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status = (code: <span class="number">404</span>, msg: <span class="string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(status.code)</span>, <span class="subst">\(status.msg)</span>"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><ul>
<li><p><code>?</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg:<span class="type">String</span>? = <span class="string">"hello swift"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>nil</code></li>
</ul>
</li>
<li>unwrapping<ul>
<li><code>!</code></li>
</ul>
</li>
<li>optional binding<ul>
<li>used with <code>if</code> and <code>while</code></li>
<li>unwrapping</li>
<li><code>where</code></li>
</ul>
</li>
<li><p>implicitly unwrapped optionals</p>
<ul>
<li><p><code>!</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg:<span class="type">String</span>! = <span class="string">"hello swift!"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>“unwrapped automatically whenever it is used”</p>
</li>
</ul>
</li>
</ul>
<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h3 id="closure-expression-syntax"><a href="#closure-expression-syntax" class="headerlink" title="closure expression syntax"></a>closure expression syntax</h3><p>{(<code>parameters</code>) -&gt; <code>return type</code> in<br>    <code>statements</code><br>}</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">"hello"</span>, <span class="string">"world"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span>(&#123; (a: <span class="type">String</span>, b: <span class="type">String</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>inferring type from context</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span>(&#123; a, b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sortedNames)</span><br></pre></td></tr></table></figure>
<ul>
<li>Implicit Returns from Single-Expression Closures</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span>(&#123; s1, s2 <span class="keyword">in</span> s1 &gt; s2 &#125; )</span><br></pre></td></tr></table></figure>
<ul>
<li>shorthand argument names</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span>(&#123; $<span class="number">0</span> &gt; $<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Operator Functions</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span>(isOrderedBefore: &gt;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Trailing Closures</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span> &#123; (a, b) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sortedNames = names.<span class="built_in">sort</span> &#123;$<span class="number">0</span> &gt; $<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础数据类型&quot;&gt;&lt;a href=&quot;#基础数据类型&quot; class=&quot;headerlink&quot; title=&quot;基础数据类型&quot;&gt;&lt;/a&gt;基础数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Int&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;Stri
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.zhangl.in/blog/2016/06/04/hello-world/"/>
    <id>http://github.zhangl.in/blog/2016/06/04/hello-world/</id>
    <published>2016-06-04T14:41:49.000Z</published>
    <updated>2016-06-04T14:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>重新开始写博客啦，希望能坚持下去。</p>
<p>这里会记录些学习笔记、思考总结，或许还有人生感悟</p>
<p>感谢 <a href="http://pinggod.com/" target="_blank" rel="external">http://pinggod.com/</a> 的皮肤</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新开始写博客啦，希望能坚持下去。&lt;/p&gt;
&lt;p&gt;这里会记录些学习笔记、思考总结，或许还有人生感悟&lt;/p&gt;
&lt;p&gt;感谢 &lt;a href=&quot;http://pinggod.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pinggod.c
    
    </summary>
    
    
  </entry>
  
</feed>
